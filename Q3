Develop a binary search tree (BST) to manage student records in a university. Each node in the BST represents a student, identified by a unique Student ID. The BST will list the students in alphabetical order by their id using in-order traversal.

Input Format:
Get continuous input until user enters a negative value.

Output Format:
Print the student id in in-order traversals.

Sample Input: 
10
5
12
7
15
18
1
-1

Sample Output:
1 5 7 10 12 15 18



SOLUTION:


class Node:
    def __init__(self,key):
        self.left=None
        self.right=None
        self.val=key
class BST:
    def __init__(self):
        self.root=None
    def insert(self,root,key):
        if root is None:
            return(Node(key))#10
        else:
            if root.val>key:
                root.left=self.insert(root.left,key)
            else:
                root.val>key
                root.right=self.insert(root.right,key)
            return root
    def inorder(self,root):
        if root:
            self.inorder(root.left)
            print(root.val,end=" ")
            self.inorder(root.right)
#main program
bst=BST()
while 1:
    value=int(input())
    if value<0:
        break
    else:
        bst.root=bst.insert(bst.root,value)
bst.inorder(bst.root)
print()


